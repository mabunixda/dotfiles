#!/bin/bash

GPG_TTY=$(tty)
export GPG_TTY
# Start the gpg-agent if not already running

if [[ "$OSTYPE" != "darwin"* ]]; then
    if ! pgrep -x -u "${USER}" gpg-agent >/dev/null 2>&1; then
        gpg-connect-agent /bye >/dev/null 2>&1
        gpg-connect-agent updatestartuptty /bye >/dev/null
    fi
    # Set SSH to use gpg-agent
    unset SSH_AGENT_PID
    if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
        export SSH_AUTH_SOCK="/run/user/$UID/gnupg/S.gpg-agent.ssh"
    fi
    # add alias for ssh to update the tty
    alias ssh="gpg-connect-agent updatestartuptty /bye >/dev/null; ssh"

fi
complete -C /usr/local/bin/mc mc


function kubectlgetall {
    if [ -z "$1" ]; then
        echo "you must apply a namespace!"
        exit 1
    fi
    for i in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
        echo "Resource:" $i
        kubectl -n ${1} get --ignore-not-found ${i}
    done
}
function kubectl_delete_ns {
    NAMESPACE=$1
    kubectl proxy &
    kubectl get namespace $NAMESPACE -o json |jq '.spec = {"finalizers":[]}' | jq '.metadata.annotations={}' | jq '.metadata.finalizers=[]' >temp.json
    curl -k -H "Content-Type: application/json" -X PUT --data-binary @temp.json 127.0.0.1:8001/api/v1/namespaces/$NAMESPACE/finalize;
}

beautify_ansible() {
    export ANSIBLE_STDOUT_CALLBACK=debug
}

kubesec ()
{
    local FILE="${1:-}";
    [[ ! -f "${FILE}" ]] && {
        echo "kubesec: ${FILE}: No such file" >&2;
        return 1
    };
    curl --silent \
    --compressed \
    --connect-timeout 5 \
    -F file=@"${FILE}" \
    https://kubesec.io/ | jq
}
setgit() {
    MOD="$1"
    shift
    if [ -z "$MOD" ]; then
        MOD="private"
    fi
    if [ ! -f  "${HOME}/.gitconfig.$MOD" ]; then
        echo "customisation $MOD does not exit!"
        return
    fi
    echo -n "reinit gitconfig ..."
    rm -f $HOME/.gitconfig
    cat "$HOME/.gitconfig.core" > "$HOME/.gitconfig"
    echo -n " and adding $MOD ... "
    cat "$HOME/.gitconfig.$MOD" >> "$HOME/.gitconfig"
    echo "done"
}

vagrant_ssh() {
    name=$(vagrant  status | head -n 3 | tail -n 1 | awk -F' ' '{print $1}')
    vagrant ssh-config > ${HOME}/.ssh/config.d/vagrant_$name.conf
    generate_ssh_config
}

generate_ssh_config() {
    if [ -f "${HOME}/.ssh/config" ]; then
        mv -f ${HOME}/.ssh/config ${HOME}/.ssh/config.bkp
    fi
    for file in $(find ${HOME}/.ssh/config.d/ -name "*.conf"); do
        cat $file >> ${HOME}/.ssh/config
        echo "" >> ${HOME}/.ssh/config
    done
}

git_status() {
    find $PWD/* -type d -name ".git" -not -name "*build*"  -exec /bin/bash -c '(echo `dirname "{}"` && cd `dirname "{}"` && git status -s && echo "" ) ' \;
}
init_vagrant() {

    name=$(basename `pwd`)
    sshport="$1"
    boxname="$2"
    mem="$3"
    if [ -z "$boxname" ]; then
        boxname="ubuntu/xenial64"
    fi
    if [ -z "$mem" ]; then
        mem="512"
    fi



    cat << __EOF__ >  Vagrantfile

Vagrant.configure("2") do |config|

  config.vm.network "forwarded_port", guest: 22, host: $sshport, id: "ssh"
  config.vm.box = "$boxname"
  config.vm.hostname = "$name"
  config.vm.define "$name" do |vb|
  end

  config.ssh.insert_key = true
  config.ssh.forward_agent = true

  config.vm.provider :virtualbox do |vb|
      vb.name = "$name"
      vb.customize ["modifyvm", :id, "--memory", "$mem"]
    end

end
__EOF__


}
enable_de_kbd() {
    setxkbmap -layout us,de
    setxkbmap -option 'grp:alt_shift_toggle'
}

git_ls_size() {
    git rev-list --objects --all \
    | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
    | awk '/^blob/ {print substr($0,6)}' \
    | sort --numeric-sort --key=2 \
    | cut --complement --characters=13-40 \
    | numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
}

cpuload() {
    ps ahux --sort=-c | awk 'NR<=5{printf"%s %6d %s\n",$3,$2,$11}'
}
