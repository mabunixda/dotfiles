#!/bin/bash

GPG_TTY=$(tty)
export GPG_TTY
# Start the gpg-agent if not already running

if [[ "$OSTYPE" != "darwin"* ]]; then
    if ! pgrep -x -u "${USER}" gpg-agent >/dev/null 2>&1; then
        gpg-connect-agent /bye >/dev/null 2>&1
        gpg-connect-agent updatestartuptty /bye >/dev/null
    fi
    # Set SSH to use gpg-agent
    unset SSH_AGENT_PID
    if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
        export SSH_AUTH_SOCK="/run/user/$UID/gnupg/S.gpg-agent.ssh"
    fi
    # add alias for ssh to update the tty
    alias ssh="gpg-connect-agent updatestartuptty /bye >/dev/null; ssh"

fi
complete -C /usr/local/bin/mc mc


function kubectlgetall {
    if [ -z "$1" ]; then
        echo "you must apply a namespace!"
        exit 1
    fi
    for i in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
        echo "Resource:" $i
        kubectl -n ${1} get --ignore-not-found ${i}
    done
}
function kubectl_delete_ns {
    NAMESPACE=$1
    if [ -z "$NAMESPACE" ] || [ -z "$(kubectl get ns -o name | sed 's/namespace\///' | grep $NAMESPACE )" ]; then
        echo "valid namespace was not referenced as param"
        exit 1
    fi
    kubectl proxy &
    kubectl get namespace $NAMESPACE -o json |jq '.spec = {"finalizers":[]}' | jq '.metadata.annotations={}' | jq '.metadata.finalizers=[]' >temp.json
    curl -k -H "Content-Type: application/json" -X PUT --data-binary @temp.json 127.0.0.1:8001/api/v1/namespaces/$NAMESPACE/finalize;
    pid=$(pgrep kubectl)
    kill $pid
}

function kubectl_drop_node {
    NODE=$1
    if [ -z "$NODE" ] || [ -z "$(kubectl get node -o name | sed 's/node\///' | grep $NODE )" ]; then
        echo "valid node was not referenced as param"
        exit 1
    fi

    kubectl cordon $NODE
    kubectl drain $NODE --force --ignore-daemonsets  --delete-emptydir-data
    kubectl delete node $NODE --wait

}

beautify_ansible() {
    export ANSIBLE_STDOUT_CALLBACK=debug
}

kubesec ()
{
    local FILE="${1:-}";
    [[ ! -f "${FILE}" ]] && {
        echo "kubesec: ${FILE}: No such file" >&2;
        return 1
    };
    curl --silent \
    --compressed \
    --connect-timeout 5 \
    -F file=@"${FILE}" \
    https://kubesec.io/ | jq
}
setgit() {
    MOD="$1"
    shift
    if [ -z "$MOD" ]; then
        MOD="private"
    fi
    if [ ! -f  "${HOME}/.gitconfig.$MOD" ]; then
        echo "customisation $MOD does not exit!"
        return
    fi
    echo -n "reinit gitconfig ..."
    rm -f $HOME/.gitconfig
    cat "$HOME/.gitconfig.core" > "$HOME/.gitconfig"
    echo -n " and adding $MOD ... "
    cat "$HOME/.gitconfig.$MOD" >> "$HOME/.gitconfig"
    echo "done"
}

vagrant_ssh() {
    name=$(vagrant  status | head -n 3 | tail -n 1 | awk -F' ' '{print $1}')
    vagrant ssh-config > ${HOME}/.ssh/config.d/vagrant_$name.conf
    generate_ssh_config
}

generate_ssh_config() {
    if [ -f "${HOME}/.ssh/config" ]; then
        mv -f ${HOME}/.ssh/config ${HOME}/.ssh/config.bkp
    fi
    for file in $(find ${HOME}/.ssh/config.d/ -name "*.conf"); do
        cat $file >> ${HOME}/.ssh/config
        echo "" >> ${HOME}/.ssh/config
    done
}

git_status() {
    find $PWD/* -type d -name ".git" -not -name "*build*"  -exec /bin/bash -c '(echo `dirname "{}"` && cd `dirname "{}"` && git status -s && echo "" ) ' \;
}
init_vagrant() {

    name=$(basename `pwd`)
    sshport="$1"
    boxname="$2"
    mem="$3"
    if [ -z "$boxname" ]; then
        boxname="ubuntu/xenial64"
    fi
    if [ -z "$mem" ]; then
        mem="512"
    fi



    cat << __EOF__ >  Vagrantfile

Vagrant.configure("2") do |config|

  config.vm.network "forwarded_port", guest: 22, host: $sshport, id: "ssh"
  config.vm.box = "$boxname"
  config.vm.hostname = "$name"
  config.vm.define "$name" do |vb|
  end

  config.ssh.insert_key = true
  config.ssh.forward_agent = true

  config.vm.provider :virtualbox do |vb|
      vb.name = "$name"
      vb.customize ["modifyvm", :id, "--memory", "$mem"]
    end

end
__EOF__


}
enable_de_kbd() {
    setxkbmap -layout us,de
    setxkbmap -option 'grp:alt_shift_toggle'
}

git_ls_size() {
    git rev-list --objects --all \
    | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
    | awk '/^blob/ {print substr($0,6)}' \
    | sort --numeric-sort --key=2 \
    | cut --complement --characters=13-40 \
    | numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
}

cpuload() {
    ps ahux --sort=-c | awk 'NR<=5{printf"%s %6d %s\n",$3,$2,$11}'
}
kubectl_node_pods() {
    if [ -z "$1" ]; then
        echo "no node appended to call"
        return
    fi
    echo "Getting pods of '$1'"
    printf '=%.0s' {1..80}
    echo ""
    kubectl get po -A -o wide | awk -v "node=$1" '{if ( $8==node ) { print $0 } }'
}
github_download() {
    org=$1
    project=$2
    file=$3
    version=$(curl -sX GET https://api.github.com/repos/$org/$project/releases/latest | grep 'tag_name' | cut -d\" -f4)
    echo "Latest version on $project github repo is $version"
    curl -fOL "https://github.com/${org}/${project}/releases/download/${version}/${file}"

}

hashicorp_download() {
    project=$1
    version=$2
    {
        curl -o "/tmp/$project_$version.zip" -fL "https://releases.hashicorp.com/$project/$project_$version/${project}_${version}_linux_amd64.zip"
        unzip -o "/tmp/$project_$version.zip" -d "$HOME/bin/"
    } || {
        rm -f "/tmp/$project_$version.zip"
    }
}

retag_containers() {
    target=$1
    if [ -z "$target" ]; then
        target="registry.home.nitram.at"
    fi
    for d in $(docker images | grep "^quay.io/mabunixda" | grep -v none | awk '{print $1":"$2}' | sort ); do
        l=$(echo $d | sed "s/quay\.io\/mabunixda/$target/")
        docker tag "$d" "$l"
        docker push "$l"
    done
}


vault_login() {

  VAULT_GITHUB_TOKEN_PATH="${VAULT_GITHUB_TOKEN_PATH:-$HOME/.vault_github_token}"
  if [ -n "${VAULT_NAMESPACE}" ]; then
    export VAULT_NAMESPACE_PREFIX="/${VAULT_NAMESPACE}"
  fi

  if [[ ! -f "${VAULT_GITHUB_TOKEN_PATH}" ]]; then
    echo "[ERR] No GitHub access token found at ${VAULT_GITHUB_TOKEN_PATH}"
    return
  fi
  export VAULT_GITHUB_TOKEN="$(cat $VAULT_GITHUB_TOKEN_PATH)"
  VAULT_PAYLOAD="{\"token\":\"${VAULT_GITHUB_TOKEN}\"}"
  VAULT_TOKEN=$(curl -s -X POST -d ${VAULT_PAYLOAD} ${VAULT_ADDR}/v1${VAULT_NAMESPACE_PREFIX}/auth/github/login | jq -r .auth.client_token)
  if ! grep -q "s." <<< $VAULT_TOKEN ; then
    echo "[ERR] Vault token not retrieved."
    return
  fi
  export VAULT_TOKEN
}


vault_ssh () {

  set -ex

  if [[ -z "${1}" ]]; then
    echo "[INFO] Usage: vault_ssh user@host [-p 2222]"
    return
  fi

  SSH_USER=$(ssh -G "$SSH_HOST" | awk '$1 == "user" p{ print $2 }')
  if [[ "${1}" =~ ^-+ ]]; then
    echo "[ERR] Additional SSH flags must be passed after the hostname. e.g. 'vault_ssh user@host -p 2222'"
    return
  fi
  if [[ "${1}" =~ ^[a-zA-Z0-9]+@[a-zA-Z0-9\.]+ ]]; then
    SSH_USER=$(echo $1 | cut -d'@' -f1)
    SSH_HOST=$(echo $1 | cut -d'@' -f2)
  else
    SSH_HOST=${1}
  fi

  VAULT_PRIVATE_SSH_KEY=${VAULT_PRIVATE_SSH_KEY:-$HOME/.ssh/id_ed25519_private}
  VAULT_SIGNED_KEY="$HOME/.ssh/vault_signed_key.pub"

  # sign the public key
  vault_sign_key

  # shift arguments one to the left to remove target address
  shift 1
  # construct an SSH command with the credentials, and append any extra args
  ssh -A -i ${VAULT_SIGNED_KEY} -i ${VAULT_PRIVATE_SSH_KEY} ${SSH_USER}@${SSH_HOST} $@
}

vault_sign_key () {
  VAULT_ADDR="${VAULT_ADDR:-https://vault.home.nitram.at}"
  VAULT_MOUNT=${VAULT_MOUNT:-home_ssh}
  VAULT_ROLE=${VAULT_ROLE:-signed}

  if [ -n "${VAULT_NAMESPACE}" ]; then
    VAULT_NAMESPACE_PREFIX="/${VAULT_NAMESPACE}"
  fi


  VAULT_PUBLIC_SSH_KEY=${VAULT_PUBLIC_SSH_KEY:-"$HOME/.ssh/id_ed25519_private.pub"}
  VAULT_SIGNED_KEY=${VAULT_SIGNED_KEY:-"$HOME/.ssh/vault_signed_key.pub"}
  SSH_USER=${SSH_USER:-ubuntu}

  if [[ ! -n "${VAULT_TOKEN}" ]]; then
    echo "[ERR] No vault access token found at ${VAULT_TOKEN}"
    return
  fi

  export TMP_DIR=$(mktemp -d)
  cat > "$(echo ${TMP_DIR}/ssh-ca.json)" << EOF
{
    "public_key": "$(cat ${VAULT_PUBLIC_SSH_KEY})",
    "valid_principals": "${SSH_USER}"
}
EOF
  if ! curl -s --fail -H "X-Vault-Token: ${VAULT_TOKEN}" -X POST -d @${TMP_DIR}/ssh-ca.json \
      ${VAULT_ADDR}/v1${VAULT_NAMESPACE_PREFIX}/${VAULT_MOUNT}/sign/${VAULT_ROLE} | jq -r .data.signed_key > "${VAULT_SIGNED_KEY}" ; then
    echo "[ERR] Failed to sign public key."
  fi
  chmod 0600 $VAULT_SIGNED_KEY
#  rm -rf $TMP_DIR
}

function vault_otp() {


    VAULT_ADDR="${VAULT_ADDR:-https://vault.home.nitram.at}"
    VAULT_MOUNT="${VAULT_MOUNT:-home_ssh}"
    VAULT_ROLE="${VAULT_ROLE:-otp}"
    SSH_USER="${SSH_USER:-$(ssh -G "$HOSTNAME" | awk '$1 == "user" p{ print $2 }')}"
    ANSIBLE_INVENTORY=${ANSIBLE_INVENTORY:-~/Documents/private/infrastructure/inventory/lan-cluster/lan.yml}
    if [ -n "${VAULT_NAMESPACE}" ]; then
      VAULT_NAMESPACE_PREFIX="/${VAULT_NAMESPACE}"
    fi

    if [ -z "$VAULT_TOKEN" ]; then
        echo "missing vault token!"
        return
    fi
    HOSTNAME=$1
    if [ -n "$2" ]; then
        SSH_USER="$2"
    fi
    if [ -z "$VAULT_TOKEN" ]; then
        echo "missing vault token!"
        return
    fi

    IP=$(ansible-inventory -i "$ANSIBLE_INVENTORY" --host "$HOSTNAME" 2>/dev/null | jq -r '.ansible_host')

    if [ -z "$IP" ]; then
        IP=$(ssh -G "$HOSTNAME" | awk '$1 == "hostname" p{ print $2 }')
    fi

    if [ -z "$IP" ]; then
        IP=$HOSTNAME
    fi

    VALIDATE=$(dig +short "$IP" || echo "")
    if [ -n "$VALIDATE" ]; then
        IP=$VALIDATE
    fi


    OTP=$(curl \
            --silent \
            --header "X-Vault-Token: $VAULT_TOKEN" \
            --request POST \
            --data "{ \"username\": \"$SSH_USER\", \"ip\": \"${IP}\" }" \
            $VAULT_ADDR/v1${VAULT_NAMESPACE_PREFIX}/$VAULT_MOUNT/creds/$VAULT_ROLE \
            | jq -r '.data.key')

    echo $OTP

}

function nomad_login() {
    if [ -z "$VAULT_TOKEN" ]; then
      echo "No VAULT_TOKEN set"
      return
    fi
    if [ -n "${VAULT_NAMESPACE}" ]; then
      VAULT_NAMESPACE_PREFIX="/${VAULT_NAMESPACE}"
    fi

    VAULT_NOMAD_MOUNT=${VAULT_NOMAD_MOUNT:-nomad}
    VAULT_NOMAD_ROLE="${VAULT_NOMAD_ROLE:-admin}"

    NOMAD_ROLE_DATA=$(curl -s -H "X-Vault-Token: ${VAULT_TOKEN}" -X GET \
      ${VAULT_ADDR}/v1${VAULT_NAMESPACE_PREFIX}/${VAULT_NOMAD_MOUNT}/creds/${VAULT_NOMAD_ROLE})

    NOMAD_TOKEN=$(echo $NOMAD_ROLE_DATA | jq -r '.data.secret_id')

    NOMAD_ACCESS_ID=$(echo $NOMAD_ROLE_DATA | jq -r '.data.accessor_id')

    export NOMAD_TOKEN
    export NOMAD_ACCESS_ID
}

function nomad_check() {
  TOKEN=${NOMAD_ACCESS_ID:-}
  if [ -n "$1" ]; then
    TOKEN="$1"
  fi
  nomad acl token info $TOKEN
}


function github_deep_clone() {

  CNTX=$1; NAME=$2; PAGE=1
  if [ "$CNTX" != "user" ] && [ "$CNTX" != "orgs" ]; then
	  echo "context must be user|orgs"
	  return
	 fi
   if [ -n "$API_TOKEN" ]; then
      HEADER="Authorization: Bearer ${API_TOKEN}"
   fi
   for repo in $(curl -H "$HEADER" -s "https://api.github.com/${CNTX}/${NAME}/repos?page=1&per_page=100"  | jq -r -c -M '.[] | { name:.name, url:.clone_url  }'); do
      name=$(echo $repo | jq -r '.name')
      url=$(echo $repo | jq -r '.url')
      if [ -d "$name" ]; then
        pushd $name 
        git fetch -v --all
        git switch main || git switch master
        git pull
        popd
      else
        git clone $url $name
      fi
    done

}

function apply_terraform_token() { 
  token=$1
  hostname=${2:-app.terraform.io}
  if [ -z "$token" ]; then
    echo "no token provided"
    return
  fi
  export TFE_TOKEN=$token
  cat > "$HOME/.terraform.d/credentials.tfrc.json" <<EOF
{
  "credentials": {
    "${hostname}": {
      "token": "${token}"
    }
  }
}
EOF
}
