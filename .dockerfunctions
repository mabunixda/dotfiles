#!/bin/bash
#
# Helper Functions
#

DOCKER_REPO="r.nitram.at"

dcleanup(){
	local containers
	containers=( $(docker ps -aq 2>/dev/null) )
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	images=( $(docker images --filter dangling=true -q 2>/dev/null) )
	docker rmi "${images[@]}" 2>/dev/null
}

match_groups() { 
	local wanted_groups=$@
	local docker_flags=
	for group in ${wanted_groups}; do
  		gid=$(getent group $group | cut -d: -f3)
  		[ -z "$gid" ] || docker_flags+=" --group-add=$gid"
	done
	echo ${docker_flags}
}

optional_devices() {
	local wanted_devices=$@
	local docker_flags=
	for dev in ${wanted_devices}; do
		[ -f "$dev" ] && docker_flags+=" --device $dev" 
	done
	echo $docker_flags
}

del_stopped(){
	local name=$1
	local force=$2
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)
	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	else 
		if [[ "$force" == "force" ]]; then
			docker rm -f "$name"
		fi
	fi
}

relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}
#ansible() {
#	del_stopped ansible
#
#	docker run --rm -it \
#		-v $HOME:/root \
#		-v $PWD/hosts:/etc/ansible/hosts \
#		--name ansible \
#		ansible \
#		ansible $@
#}
#ansible-vault() {
#	del_stopped ansible
#
#	docker run --rm -it \
#		-v $HOME:/root \
#		-v $PWD/hosts:/etc/ansible/hosts \
#		--name ansible \
#		ansible \
#		ansible-vault $@
#}
avlsocks() {
	del_stopped avlsocks

	network_state=$(docker network inspect --format "{.Scope}" socks 2>/dev/null)
	if [[ "$network_state" == "" ]]; then
		docker network create socks
	fi

		docker run -d  \
			-v $HOME/.ssh/id_rsa:/home/app/.ssh/id_rsa:ro \
			-v $HOME/.ssh/config:/home/app/.ssh/config:rw \
			-v $HOME/.ssh/known_hosts:/home/app/.ssh/known_hosts:rw \
			--network socks \
			--name avlsocks \
			avlsocksproxy 

}
betaflight() {

	relies_on chrome

	docker exec -d chrome \
	/opt/google/chrome/google-chrome \
		--user-data-dir=/data \
		--profile-directory=Default \
		--app-id=kdaghagfopacdngbohiknlhcocjccjao
}
cadvisor(){
	docker run -d \
		--restart always \
		-v /:/rootfs:ro \
		-v /var/run:/var/run:rw \
		-v /sys:/sys:ro  \
		-v /var/lib/docker/:/var/lib/docker:ro \
		-p 1234:8080 \
		--name cadvisor \
		google/cadvisor

	hostess add cadvisor "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' cadvisor)"
	browser-exec "http://cadvisor:8080"
}
chrome(){
	# add flags for proxy if passed
	local proxy=
	local map
	local args=$*
	if [[ "$1" == "tor" ]]; then
		relies_on torproxy

		map="MAP * ~NOTFOUND , EXCLUDE torproxy"
		proxy="socks5://torproxy:9050"
		args="https://check.torproject.org/api/ip ${*:2}"
	fi
	local docker_flags+=$(match_groups "audio" "video")
	docker_flags+=$(optional_devices "/dev/hidraw4" "/dev/hidraw5" "/dev/usb" "/dev/bus/usb" )

	del_stopped chrome
#		--device /dev/video0 \
#		--device /dev/dri \
#
#		--security-opt seccomp:$HOME/dotfiles/etc/docker/seccomp/chrome.json \
	# one day remove /etc/hosts bind mount when effing
	# overlay support inotify, such bullshit
	docker run -it \
		--memory 3gb \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "$HOME/Downloads:/home/app/Downloads" \
		-v "$HOME/.config/google-chrome/:/data" \
		-v "${HOME}/Pictures:/home/app/Pictures" \
		-v "${HOME}/Torrents:/home/app/Torrents" \
		-v /dev/shm:/dev/shm \
		-v /dev/dri:/dev/dri \
		-v /etc/hosts:/etc/hosts \
		${docker_flags} \
		--device /dev/snd \
		--network socks \
		--privileged \
		--name chrome \
		${DOCKER_REPO}/chrome \
		--user-data-dir=/data \
		--proxy-server="$proxy" \
		--host-resolver-rules="$map" "$args"

}
firefox(){
	del_stopped firefox
	docker run  \
		--memory 2gb \
		--net host \
		--cpuset-cpus 0 \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/.firefox/cache:/root/.cache/mozilla" \
		-v "${HOME}/.firefox/mozilla:/root/.mozilla" \
		-v "${HOME}/Downloads:/root/Downloads" \
		-v "${HOME}/Pictures:/root/Pictures" \
		-v "${HOME}/Torrents:/root/Torrents" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--device /dev/dri \
		--name firefox \
		${DOCKER_REPO}/firefox "$@"
}
gitkraken(){
	del_stopped gitkraken

	docker run -d \
    -e DISPLAY=unix$DISPLAY \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v $HOME:/home/app \
    --device /dev/dri \
    --name gitkraken \
    ${DOCKER_REPO}/gitkraken
}
htop(){
	docker run --rm -it \
		--pid host \
		--net none \
		--name htop \
		${DOCKER_REPO}/htop
}
loxconfig() {

	variant="$1"
	if [ -z "$variant" ]; then
		variant="beta"
	fi

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		--cpuset-cpus 0 \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e DISPLAY=unix$DISPLAY \
		--device /dev/snd:/dev/snd \
		--name loxconfig-wine-8.1 \
		${DOCKER_REPO}/loxconfig-wine:$variant \
 		wine "C:\Program Files (x86)\Loxone\LoxoneConfig\LoxoneConfig.exe"
}
postman() {

	relies_on chrome

	docker exec -d chrome \
	/opt/google/chrome/google-chrome \
		--user-data-dir=/data \
		--profile-directory=Default \
		--app-id=fhbjgbiflinjbdggehcddcbncdddomop

}
pulseaudio(){
	del_stopped pulseaudio
	local docker_flags+=$(match_groups "audio")
	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/.config/pulse:/home/app/.config/pulse:rw \
		--device /dev/snd \
		-p 4713:4713 \
		--restart always \
		${docker_flags} \
		--name pulseaudio \
		${DOCKER_REPO}/pulseaudio
}

reg() {
	del_stopped reg
	docker run -it --rm \
	    -v ${HOME}/.docker:/root/.docker \
		--name reg \
		r.j3ss.co/reg \
		"$@"
}
skype(){
	del_stopped skype force
	relies_on pulseaudio
	local docker_flags+=$(match_groups "audio" "video")
	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
                -v $HOME/.Skype:/home/app/.Skype \
		-e "DISPLAY=unix${DISPLAY}" \
		--link pulseaudio:pulseaudio \
		-e PULSE_SERVER=pulseaudio \
		--security-opt seccomp:unconfined \
		--device /dev/video0 \
		${docker_flags} \
		--name skype \
		${DOCKER_REPO}/skype
}
spotify(){
	del_stopped spotify
	local docker_flags+=$(match_groups "audio" "video")
	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/.config/spotify:/home/app/.config/spotify" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e QT_DEVICE_PIXEL_RATIO \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		${docker_flags} \
		--name spotify \
		${DOCKER_REPO}/spotify
}
virt-manager() {
	del_stopped virt-manager 
	echo "$@"
	docker run -it \
                -e DISPLAY=unix$DISPLAY \
    	-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK \
	    -v $HOME/.ssh:/home/app/.ssh \
		-v /usr/share/fonts:/usr/share/fonts:ro \
		-e SSH_AUTH_SOCK=$SSH_AUTH_SOCK \
    	--device /dev/dri \
		--name virt-manager \
		${DOCKER_REPO}/virt-manager 
}
vscode(){
	del_stopped vscode 

	docker run -d \
	    -e DISPLAY=unix$DISPLAY \
    	-v /tmp/.X11-unix:/tmp/.X11-unix \
	    -v $HOME:/home/app \
    	--device /dev/dri \
	    --name vscode \
    	${DOCKER_REPO}/vscode \
	"$@"
}

wine() {

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		--cpuset-cpus 0 \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e DISPLAY=unix$DISPLAY \
		--device /dev/snd:/dev/snd \
		${DOCKER_REPO}/wine \
 		bash
}

###
### Awesome sauce by @jpetazzo
###
command_not_found_handle () {
	# Check if there is a container image with that name
	if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null ; then
		echo "$0: $1: command not found"
		return
	fi

	# Check that it's really the name of the image, not a prefix
	if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ; then
		echo "$0: $1: command not found"
		return
	fi

	docker run -ti -u "$(whoami)" -w "$HOME" \
		"$(env | cut -d= -f1 | awk '{print "-e", $1}')" \
		--device /dev/snd \
		-v /etc/passwd:/etc/passwd:ro \
		-v /etc/group:/etc/group:ro \
		-v /etc/localtime:/etc/localtime:ro \
		-v /home:/home \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		"${DOCKER_REPO}/${1}" "$@"
}
