#!/bin/bash
#
# Helper Functions
#

DOCKER_REPO="mabunixda"

findport() {
	local port="$1"
	for ((i=0; i<10; ++i)); do
		port_exists=$(docker ps | grep "${port}->${port}")
		if [ -z "$port_exists" ]; then
			echo $port
			break;
		fi
		port=$(($port + 1))
	done
	echo ""
}
drestart() {

	local name="$1"
	docker stop $name
	del_stopped $name
	$name
}
dcleanup(){
	local containers
	containers=( $(docker ps -aq 2>/dev/null) )
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	images=( $(docker images --filter dangling=true -q 2>/dev/null) )
	docker rmi "${images[@]}" 2>/dev/null

	local forced="$1"
	if [ "$forced" == "yes" ]; then
		docker rmi -f $(docker images -aq)
	fi
}

match_groups() {
	local wanted_groups=$@
	local docker_flags=
	for group in ${wanted_groups}; do
  		gid=$(getent group $group | cut -d: -f3)
  		[ -z "$gid" ] || docker_flags+=" --group-add=$gid"
	done
	echo ${docker_flags}
}

optional_devices() {
	local wanted_devices=$@
	local docker_flags=
	for dev in ${wanted_devices}; do
		[ -f "$dev" ] && docker_flags+=" --device $dev"
	done
	echo $docker_flags
}

del_stopped(){
	local name=$1
	local force=$2
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)
	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	else
		if [[ "$force" == "force" ]]; then
			docker rm -f "$name"
		fi
	fi
}

relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}
#ansible() {
#	del_stopped ansible
#
#	docker run --rm -it \
#		-v $HOME:/root \
#		-v $PWD/hosts:/etc/ansible/hosts \
#		--name ansible \
#		ansible \
#		ansible $@
#}
#ansible-vault() {
#	del_stopped ansible
#
#	docker run --rm -it \
#		-v $HOME:/root \
#		-v $PWD/hosts:/etc/ansible/hosts \
#		--name ansible \
#		ansible \
#		ansible-vault $@
#}

betaflight() {

	relies_on chrome

	docker exec -d chrome \
	/opt/google/chrome/google-chrome \
		--user-data-dir=/data \
		--profile-directory=Default \
		--app-id=kdaghagfopacdngbohiknlhcocjccjao
}
cadvisor(){
	docker run -d \
		--restart always \
		-v /:/rootfs:ro \
		-v /var/run:/var/run:rw \
		-v /sys:/sys:ro  \
		-v /var/lib/docker/:/var/lib/docker:ro \
		-p 1234:8080 \
		--name cadvisor \
		google/cadvisor

	hostess add cadvisor "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' cadvisor)"
	browser-exec "http://cadvisor:8080"
}
citrix() {
	relies_on chrome

	docker exec -d chrome \
	/opt/google/chrome/google-chrome \
		--user-data-dir=/data \
		--profile-directory=Default \
		--app-id=kdaghagfopacdngbohiknlhcocjccjao

}
chrome(){
	# add flags for proxy if passed
	local proxy=
	local map
	local args=$*
	if [[ "$1" == "tor" ]]; then
		relies_on torproxy

		map="MAP * ~NOTFOUND , EXCLUDE torproxy"
		proxy="socks5://torproxy:9050"
		args="https://check.torproject.org/api/ip ${*:2}"
	fi
	local docker_flags+=$(match_groups "audio" "video")
	docker_flags+=$(optional_devices "/dev/hidraw4" "/dev/hidraw5" "/dev/usb" "/dev/bus/usb" )

	del_stopped chrome
#		--device /dev/video0 \
#		--device /dev/dri \
#
#		--security-opt seccomp:$HOME/dotfiles/etc/docker/seccomp/chrome.json \
	# one day remove /etc/hosts bind mount when effing
	# overlay support inotify, such bullshit
	docker run -d \
		--privileged \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "$HOME/Downloads:/home/app/Downloads" \
		-v "$HOME/.config/google-chrome/:/data" \
		-v "${HOME}/Pictures:/home/app/Pictures" \
		-v "${HOME}/Torrents:/home/app/Torrents" \
		-v /dev/shm:/dev/shm \
		-v /dev/dri:/dev/dri \
		-v /etc/hosts:/etc/hosts \
		${docker_flags} \
		--device /dev/snd \
		--network socks \
		--privileged \
		--name chrome \
		${DOCKER_REPO}/chrome \
		--user-data-dir=/data \
		--proxy-server="$proxy" \
		--host-resolver-rules="$map" "$args"

}

dgcloud(){
	docker run --rm -it \
		-v "${HOME}/.gcloud:/root/.config/gcloud" \
		-v "${HOME}/.ssh:/root/.ssh:ro" \
		-v "$(which docker):/usr/bin/docker" \
		--network socks \
		-v /var/run/docker.sock:/var/run/docker.sock \
		--name gcloud \
		${DOCKER_REPO}/gcloud "$@"
}
eclipse(){
	del_stopped eclipse
	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/:/home/app/" \
		-e "DISPLAY=unix${DISPLAY}" \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--name eclipse \
		${DOCKER_REPO}/eclipse
}
gatling() {
	del_stopped gatling
	docker run \
		--name gatling \
		--net host \
		-v /etc/localtime:/etc/localtime:ro \
		-v "$HOME/.gatling/conf/:/opt/gatling/conf" \
		-v "${HOME}/.gatling/results:/opt/gatling/results" \
		-v "${HOME}/.gatling/user-files:/opt/gatling/user-files" \
		${DOCKER_REPO}/gatling "gatling.sh" "$@"
}

gatling_record() {
	docker run --rm -it  \
		--net host \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "$HOME/.gatling/conf/:/opt/gatling/conf" \
		-v "${HOME}/.gatling/results:/opt/gatling/results" \
		-v "${HOME}/.gatling/user-files:/opt/gatling/user-files" \
		${DOCKER_REPO}/gatling "recorder.sh" "$@"

}

gitkraken(){
	del_stopped gitkraken

	docker run -it \
    -e DISPLAY=unix$DISPLAY \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v $HOME:/home/app \
    --device /dev/dri \
    --name gitkraken \
    ${DOCKER_REPO}/gitkraken
}
htop(){
	docker run --rm -it \
		--pid host \
		--net none \
		--name htop \
		${DOCKER_REPO}/htop
}

jd2() {

	localport=$(grep "localhttpport" ~/.jdownloader2/cfg/*.json | awk -F': ' '{print $3}'  | sed 's/,//')
	docker_flags=$(match_groups docker)
	docker_flags+=" -p 127.0.0.1:$localport:$localport"

	docker run -it \
		--privileged \
		--network socks \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v ~/.jdownloader2:/home/app \
		-v ~/Downloads:/home/app/Downloads \
		-v /var/run/docker.sock:/var/run/docker.sock \
		$docker_flags \
		-e DISPLAY=unix$DISPLAY ${DOCKER_REPO}/jdownloader2
}

jekyll() {
	docker run -it \
		-v $PWD:/srv/jekyll \
		-p 4000:4000 \
		jekyll/jekyll:3.8 \
		bash
}
loxconfig() {

	variant="$1"
	if [ -z "$variant" ]; then
		variant="beta"
	fi
	image="$2"
	if [ -z "$image" ]; then
		image="${DOCKER_REPO}/loxconfig-wine"
	fi
	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		--cpuset-cpus 0 \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e DISPLAY=unix$DISPLAY \
		--device /dev/snd:/dev/snd \
		--name loxconfig-wine-8.1 \
		$image:$variant \
 		/bin/bash
	#wine64 "C:\Program Files (x86)\Loxone\LoxoneConfig\LoxoneConfig.exe"
}
netbeans(){
	del_stopped netbeans
	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/:/home/app/" \
		-e "DISPLAY=unix${DISPLAY}" \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--name netbeans \
		${DOCKER_REPO}/netbeans
}
ovpn() {
	docker run --rm -it  \
		--network host \
		--cap-add NET_ADMIN \
		--device /dev/net/tun \
		-v ${PWD}:/etc/openvpn \
		${DOCKER_REPO}/openvpn \
		$@

}
postman() {

	relies_on chrome

	docker exec -d chrome \
	/opt/google/chrome/google-chrome \
		--user-data-dir=/data \
		--profile-directory=Default \
		--app-id=fhbjgbiflinjbdggehcddcbncdddomop

}
pulseaudio(){
	network_state=$(docker network inspect --format "{.Scope}" pulseaudio 2>/dev/null)
	if [[ "$network_state" == "" ]]; then
		docker network create pulseaudio
	fi

	del_stopped pulseaudio
	local docker_flags+=$(match_groups "audio")
	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/.config/pulse:/home/app/.config/pulse:rw \
		--device /dev/snd \
		-p 4713:4713 \
		--network pulseaudio \
		--restart always \
		${docker_flags} \
		--name pulseaudio \
		${DOCKER_REPO}/pulseaudio
}

reg() {
	docker run -it --rm \
	    -v ${HOME}/.docker:/root/.docker \
		r.j3ss.co/reg \
		"$@"
}
skype(){
	del_stopped skype force
	relies_on pulseaudio
	local docker_flags+=$(match_groups "audio" "video")

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/.config/skypeforlinux:/home/app/.config/skypeforlinux \
		-e "DISPLAY=unix${DISPLAY}" \
		--network pulseaudio \
		-e PULSE_SERVER=pulseaudio \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/video0 \
		${docker_flags} \
		--name skype \
		${DOCKER_REPO}/skype
}
smartgit(){
	del_stopped smartgit

	docker run -it \
    -e DISPLAY=unix$DISPLAY \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v $HOME:/home/app \
    --device /dev/dri \
    --name smartgit \
    ${DOCKER_REPO}/smartgit
}

socksproxy() {
    local cmd=""
	local name="$1"
	local docker_flags=
	network_state=$(docker network inspect --format "{.Scope}" socks 2>/dev/null)
	if [[ "$network_state" == "" ]]; then
		docker network create socks
	fi
	if [ ! -z "$2" ]; then
	    cmd="$1"
	    name="$2"
	else
	    port=$(findport 1080)
		cmd="ssh -N -D :$port $name"
	    docker_flags+="-p $port:$port "
		echo "using proxy port $port"
	fi
        namesize=${#name}
        if [[ $namesize -lt 3 ]]; then
          name="socks_$name"
        fi
	del_stopped "$name"
	docker_flags+="--name $name"
	for f in $( ls $HOME/.ssh/id_* ); do
           fname=$(basename $f)
	   docker_flags+=" -v $f:/home/app/.ssh/$fname:ro "
	done
	docker run -it --rm \
			-v $HOME/.ssh/config:/home/app/.ssh/config:rw \
			-v $HOME/.ssh/known_hosts:/home/app/.ssh/known_hosts:rw \
			--network socks \
			$docker_flags \
			${DOCKER_REPO}/socksproxy  \
			"$cmd"

}
spotify(){
	del_stopped spotify
	local docker_flags+=$(match_groups "audio" "video")
	relies_on pulseaudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/.cache/spotify:/home/app/.cache/spotify" \
		-v "${HOME}/.config/spotify:/home/app/.config/spotify" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e QT_DEVICE_PIXEL_RATIO \
		--network pulseaudio \
		-e PULSE_SERVER=pulseaudio \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		${docker_flags} \
		--name spotify \
		${DOCKER_REPO}/spotify
}
sqldeveloper() {

		echo "try to run $dockerimage with x "
		docker run --rm -it \
		--privileged \
		--network host \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e DISPLAY=unix$DISPLAY \
		"r.nitram.at/sqldeveloper" \
		"$@"
}
torproxy(){
	del_stopped torproxy

	docker run -d \
		--restart always \
		-v /etc/localtime:/etc/localtime:ro \
		-p 9050:9050 \
		--network socks \
		--name torproxy \
		${DOCKER_REPO}/tor-proxy

	hostess add torproxy "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' torproxy)"
}
virt-manager() {
	del_stopped virt-manager

	docker run -it \
       -e DISPLAY=unix$DISPLAY \
    	-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK \
	    -v $HOME/.ssh:/home/app/.ssh \
		-v /usr/share/fonts:/usr/share/fonts:ro \
		-e SSH_AUTH_SOCK=$SSH_AUTH_SOCK \
    	--device /dev/dri \
		--name virt-manager \
		${DOCKER_REPO}/virt-manager
}
dvlc() {
	local docker_flags+=$(match_groups "audio" "video")
	docker run --rm -d \
		--device /dev/snd \
		--device /dev/dri \
        -e DISPLAY=unix$DISPLAY \
    	-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v ${HOME}:/home/app \
		${docker_flags} \
		${DOCKER_REPO}/vlc
}
vscode(){
	del_stopped vscode

	docker run -d \
	    -e DISPLAY=unix$DISPLAY \
    	-v /tmp/.X11-unix:/tmp/.X11-unix \
	    -v $HOME:/home/app \
    	--device /dev/dri \
	    --name vscode \
    	${DOCKER_REPO}/vscode \
	"$@"
}

wine() {

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		--cpuset-cpus 0 \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e DISPLAY=unix$DISPLAY \
		--device /dev/snd:/dev/snd \
		${DOCKER_REPO}/wine \
 		bash
}
wireshark() {
	del_stopped wireshark
	docker run -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		--name wireshark \
		${DOCKER_REPO}/wireshark \
		"$@"
}

xdocker() {
		dockerimage="$1"
		shift
		echo "try to run $dockerimage with x "
		docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e DISPLAY=unix$DISPLAY \
		"$dockerimage" \
		"$@"
}

